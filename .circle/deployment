#!/bin/bash

set -e

FORCE_REBUILD_INDEX="${FORCE_REBUILD_INDEX:-0}"

export PYTHONPATH=/tmp/st2/st2common:${PYTHONPATH}

if [ -z "${PACK_NAME}" ]; then
    export PACK_NAME=$(~/virtualenv/bin/python ~/ci/.circle/validate.py "${CIRCLE_PROJECT_REPONAME}" pack.yaml)
else
    export PACK_NAME="${PACK_NAME}"
fi

if [[ -z "${PACK_NAME}" ]]
then
  echo "Unable to retrieve pack name."
  exit 1
fi

# TODO: figure out how to make deploy.py rebuild the index.
# python ~/packs/.circle/deploy.py pack.yaml "${CIRCLE_PROJECT_REPONAME}"

# Clean up so the script can be retries in case of failure (e.g. race)
rm -rf ~/index
git clone git@github.com:syncurity-exchange/index.git ~/index
2>/dev/null

echo "Processing pack ${PACK_NAME}"

# NOTE: We create tags before re-building the index to ensure latest tag is reflected in the index

# Create version tags
METADATA_CHANGES=$(git rev-list --all --no-abbrev --remove-empty -- pack.yaml)
for COMMIT in $(echo $METADATA_CHANGES)
do
  git checkout ${COMMIT} pack.yaml > /dev/null
  VERSION=$(~/virtualenv/bin/python ~/ci/.circle/semver.py pack.yaml 2>/dev/null || true)

  # 1. Create a tag if version is specified and tag doesn't exist locally
  if [[ ${VERSION} ]] && [[ -z $(git rev-parse -q --verify "refs/tags/v${VERSION}") ]]
  then
    echo "Creating tag ${VERSION} for commit ${COMMIT}"
    git tag v${VERSION} ${COMMIT}
  fi

  # 2. If version is specified and tag doesn't exist on the remote, push it
  if [[ ${VERSION} ]] && [[ -z $(git ls-remote origin "refs/tags/v${VERSION}") ]]
  then
    echo "Pushing tag v${VERSION} to origin remote"
    git push origin v${VERSION}
  fi
done

# Afer pushing the version, make sure we check out the latest commit
# This is important so index reflects latest changes
git checkout master
git reset --hard master

# Verify there are no unstaged changes
git status

# Rebuild pack index directory
~/virtualenv/bin/python ~/ci/utils/pack_content.py --input . --output ~/index/v1/packs/"${PACK_NAME}"

# Rebuild the index JSON
if [ -n "$(git -C ~/index status -s)" ] || [ ${FORCE_REBUILD_INDEX} == "1" ];
then
  if [ ${FORCE_REBUILD_INDEX} == "1" ]; then
      echo "Forcing index rebuild..."
  fi
  ~/virtualenv/bin/python ~/ci/.circle/index.py --glob "~/index/v1/packs/*/pack.yaml" --output "~/index/v1/"
else
  echo "No changes in metadata, skipping the index rebuild."
fi

# Check if an icon has been added or changed
ICON_TARGET="${HOME}/index/v1/icons/${PACK_NAME}.png"
if [ -f icon.png ] && { [ ! -f ${ICON_TARGET} ] || ! cmp -s icon.png ${ICON_TARGET}; }
then
  echo "Uploading the pack icon..."
  mkdir -p ~/index/v1/icons/
  cp icon.png ${ICON_TARGET}
  gmic ${ICON_TARGET} -resize 64,64 -output ${ICON_TARGET}
  optipng -o5 ${ICON_TARGET}
  echo "Icon uploaded."
fi

# Commit the index changes
git -C ~/index add .
git -C ~/index status

if ! git -C ~/index diff --quiet --exit-code --cached
then
  echo "Updating the index repo..."
  git -C ~/index commit -m "Update the ${PACK_NAME} pack."
  git -C ~/index push origin 2>/dev/null
  echo "Index updated."

  # echo "Updating the repo description..."
  # PACK_DESCRIPTION=$(cat ~/index/v1/index.json | jq ".packs.${PACK_NAME}.description")
  # curl -sS --fail -u "${MACHINE_USER}:${MACHINE_PASSWORD}" -X PATCH --header "Content-Type: application/json" \
  #  -d '{"name": "stackstorm-'"${PACK_NAME}"'", "description": '"${PACK_DESCRIPTION}"'}' \
  #  "https://api.github.com/repos/StackStorm-Exchange/stackstorm-${PACK_NAME}" > /dev/null 2>&1
  # echo "Description updated."

else
  echo "No changes to pack metadata, skipping the index update."
fi
